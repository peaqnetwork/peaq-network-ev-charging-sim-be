---
{{- if .Values.knativeDeploy }}
{{- else }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fullname" }}
  labels:
    draft: {{ default "draft-app" .Values.draft }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
{{- if .Values.deploymentLabels }}
{{ toYaml .Values.deploymentLabels | indent 4 }}
{{- end }}
    app: "{{ template "fullname" }}" 
spec:
  serviceName: {{ template "fullname" }}-headless
  selector:
    matchLabels:
      app: "{{ template "fullname" }}"
  replicas: {{ .Values.replicas }}
  podManagementPolicy: "{{ .Values.podManagementPolicy }}"
  updateStrategy:
    type: "{{ .Values.updateStrategy }}"
  template:
    metadata:
      name: "{{ template "fullname" }}"
      labels:
        release: {{ .Release.Name | quote }}
        chart: "{{ .Chart.Name }}"
        app: "{{ template "fullname" }}"
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:      
      containers:
      - name: {{ .Values.redis.name }}
        image:  "{{ .Values.redis.image }}:{{ .Values.redis.tag }}"
        imagePullPolicy: IfNotPresent
        env:
          - name: VERSION
            value: latest
        envFrom: null
        ports:
        - name: tcp
          containerPort: {{ .Values.redis.internalPort }}
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: VERSION
          value: {{ .Chart.Version }}
        - name: "PROVIDER_MNEMONIC"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.simbeSecrets.name }}"
              key: PROVIDER_MNEMONIC
              optional: false
        - name: "CONSUMER_MNEMONIC"
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.simbeSecrets.name }}"
              key: CONSUMER_MNEMONIC
              optional: false
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
        envFrom:
{{ toYaml .Values.envFrom | indent 10 }}
        ports:
        - name: http
          containerPort: {{ .Values.service.internalPort }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.probePath | default .Values.probePath }}
            port: {{ .Values.service.internalPort }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}

      - name: {{ .Values.simp2p.name }}
        image:  "{{ .Values.simp2p.image }}:{{ .Values.simp2p.tag }}"
        imagePullPolicy: Always
        env:
          - name: VERSION
            value: latest
          - name: "port"
            value: "{{ .Values.service_p2p.internalPort }}"
          - name: "sk"
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.simbeSecrets.name }}"
                key: sk
                optional: false
        envFrom: null
        ports:
        - name: p2p
          containerPort: {{ .Values.service_p2p.internalPort }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      imagePullSecrets:
{{- range $pval := .Values.jx.imagePullSecrets }}
      - name: {{ quote $pval }}
{{- end }}
{{- end }}

      
          
        
       
